/// @mainpage "mqttsn" Binary Protocol Library
/// @tableofcontents
/// This generated code implements "mqttsn" binary protocol using various
/// classes from
/// <a href="https://github.com/arobenko/comms_champion#comms-library">COMMS Library</a>.@n
/// Below is a short summary of generated classes.
/// Please refer to <b>"How to Use Defined Custom Protocol"</b> page of its documentation
/// for detailed explanation on how to use them.
///
/// @b NOTE, that the generated protocol code is mostly declarative statements
/// of classes and types definitions. It is self explanatory and easy to read.
/// In many cases it is easier to read and understand the generated code, than the
/// doxygen generated documentation. Please spend some time on browsing around
/// and looking at the generated code in addition to reading this documentation.
///
/// @section main_messages Available Message Classes
/// The following namespaces contain all the classes describing available messages:
/// @li @ref mqttsn::message (residing in @b mqttsn/message directory).
///
/// @section main_fields Available Common Fields
/// The following namespaces contain all definition of all the fields,
/// which can be references by multiple messages:
/// @li @ref mqttsn::field (residing in @b mqttsn/field directory).
///
/// @section main_interfaces Common Interface Classes
/// The available common interface classes are:
/// @li @ref mqttsn::Message from @b mqttsn/Message.h header file).
///
/// @section main_frames Frame (Protocol Stack) Classes
/// The available frame (protocol stack) classes are:
/// @li @ref mqttsn::frame::Frame from @b mqttsn/frame/Frame.h header file).
///
/// Every frame class/type definition receives (as a template parameter) a list of
/// @b input message types it is expected to recognize. Default defintion
/// uses @ref mqttsn::AllMessages (defined in @b mqttsn/AllMessages.h).
/// @n If protocol defines any uni-directional message, then it is recommended to use
/// either @ref mqttsn::ServerInputMessages (from @b mqttsn/ServerInputMessages.h)
/// or @ref mqttsn::ClientInputMessages  (from @b mqttsn/ClientInputMessages.h)
/// @b NOTE, that the frame definition does not exactly follow the recommended
/// instructions from <b>Protocol Stack Definition Tutorial</b> page of @b COMMS
/// library documentation. The extra customization (see @ref main_customization below)
/// is performed by passing options to the layers themselves.
///
/// @section main_customization Customization
/// Depending on the value of @b customization option passed to the @b commsdsl2comms
/// code generator, the latter generates @ref mqttsn::DefaultOptions
/// struct (defined in @b  mqttsn/DefaultOptions.h file),
/// which is used by default thoughout the protocol definition classes.
/// The struct contains all the available type definition, which can be used to
/// customize default data structures and/or behaviour of various classes.
/// If any additional customization is required, just recreate similar struct with
/// relevant types overriden with new definition. The easiest way is to extend
/// the mqttsn::DefaultOptions. For example:
/// @code
/// struct MyOptions : public mqttsn::DefaultOptions
/// {
///     struct field : public mqttsn::DefaultOptions::field
///     {
///         // use comms::util::StaticString as storage type
///         using SomeStringField = comms::option::FixedSizeStorage<32>;
///     };
/// };
/// @endcode
/// @b NOTE, that inner scope of structs in the mqttsn::DefaultOptions
/// resembles scope of namespaces used in protocol definition.
///
/// The @b COMMS library also provides a flexible way to configure polymorphic
/// interface for the message classes. If the defined protocol has multiple
/// uni-directional messages (marked using @b sender property in the schema),
/// then it is recommended to define two separate interfaces: one for input,
/// other for output:
/// @code
/// using MyInputMsg =
///    mqttsn::Message<
///        comms::option::ReadIterator<const std::uint8_t*>, // for polymorphic read
///        comms::option::Handler<MyHandler> // for polymorphic dispatch
///    >;
///
/// using MyOutputMsg =
///    mqttsn::Message<
///        comms::option::WriteIterator<std::uint8_t*>, // for polymorphic write
///        comms::option::LengthInfoInterface, // for polymorphic serialisation length retrieval
///        comms::option::IdInfoInterface // for polymorphic message ID retrieval
///    >;
/// @endcode
/// In case there are only few uni-directional messages, it may make sence to define
/// single interface class:
/// @code
/// using MyMsg =
///    mqttsn::Message<
///        comms::option::ReadIterator<const std::uint8_t*>, // for polymorphic read
///        comms::option::Handler<MyHandler> // for polymorphic dispatch
///        comms::option::WriteIterator<std::uint8_t*>, // for polymorphic write
///        comms::option::LengthInfoInterface, // for polymorphic serialisation length retrieval
///        comms::option::IdInfoInterface // for polymorphic message ID retrieval
///    >;
/// @endcode
/// In this case the code generator may also define mqttsn::ServerDefaultOptions
/// (check for existence of mqttsn/ServerDefaultOptions.h file) and
/// mqttsn::ClientDefaultOptions (check for existence of mqttsn/ClientDefaultOptions.h file).
/// These structs suppress generation of unnecessary virtual functions which are not
/// going to be used. Consider using this structs as options instead of default
/// mqttsn::DefaultOptions.
///
/// In case non-custom &lt;id&gt; layer has been used in schema (files), custom,
/// application-specific allocation options to it may include
/// @b comms::option::InPlaceAllocation and/or @b comms::option::SupportGenericMessage.
/// Please see the documentation of the @b COMMS library itself for more details.

